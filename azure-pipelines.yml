trigger:
  branches:
    include:
      - staging
      - master

jobs:
- job: BuildFixitCommonUI
  displayName: 'Build Fixit Common UI Library'
  variables:
      # This library is published to the FixitFeed https://dev.azure.com/FixIt-App/FixIt-Capstone/_packaging?_a=feed&feed=FixitFeed
    projectName: FixIt-Capstone
    feedName: FixitFeed
    majorProductVersion: 1
    minorProductVersion: 0
    masterMajorMinor: $(majorProductVersion).$(minorProductVersion)
    masterPatchCount: $[counter(variables['masterMajorMinor'], 0)]
    stagingMajorMinor: $(majorProductVersion).$(minorProductVersion)-beta
    stagingPatchCount: $[counter(variables['stagingMajorMinor'], 0)]
    pullRequestMajorMinor: $(majorProductVersion).$(minorProductVersion)-alpha$(variables['system.pullrequest.pullrequestid'])
    pullRequestPatchCount: $[counter(variables['pullRequestMajorMinor'], 0)]
    branchMajorMinor: $(majorProductVersion).$(minorProductVersion)-br$(variables['build.sourcebranch'])
    branchPatchCount: $[counter(variables['branchMajorMinor'], 0)]
  pool:
    vmImage: 'windows-2019'
    displayName: 'Run Main Build and Test Pipeline'
    
  steps:

  # Run npm install
  - task: Npm@1
    displayName: 'Run npm install'
    inputs:
      command: 'install'


  # Run Unit Tests
  - task: Npm@1
    displayName: 'Run Unit Tests'
    inputs:
      command: 'custom'
      customCommand: 'run test:ci'
  
  # Publish Test Results
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test/junit.xml'
      failTaskOnFailedTests: true

  # Publish Code Coverage Results
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage Results'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.Repository.LocalPath)\coverage\cobertura-coverage.xml'
      reportDirectory: '$(Build.Repository.LocalPath)\coverage\'


  # Build Docz
  - task: Npm@1
    displayName: 'Run Build Docz'
    inputs:
      command: 'custom'
      customCommand: 'run build'

  # Copy Docz Files To Artifacts Staging Directory
  - task: CopyFiles@2
    displayName: 'Copy Docz Files To Artifacts Staging Directory'
    inputs:
      SourceFolder: '.docz\dist'
      Contents: '**'
      TargetFolder: '$(Build.Artifactstagingdirectory)'
      CleanTargetFolder: true
      OverWrite: true

  # Publish Docz
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Docz'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'

# Versioning
  # master branch versioning
  - task: Npm@1
    displayName: 'Bump package version - master branch'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    inputs:
      command: 'custom'
      workingDir: $(Build.SourcesDirectory)
      verbose: false
      customCommand: 'version $(majorProductVersion).$(minorProductVersion).$(masterPatchCount) --no-git-tag-version --allow-same-version'
      customRegistry: 'useFeed'
      customFeed: '$(projectName)/$(feedName)'

  # staging branch versioning
  - task: Npm@1
    displayName: 'Bump package version - staging branch'
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/staging')
    inputs:
      command: 'custom'
      workingDir: $(Build.SourcesDirectory)
      verbose: false
      customCommand: 'version $(majorProductVersion).$(minorProductVersion).$(stagingPatchCount)-beta --no-git-tag-version --allow-same-version'
      customRegistry: 'useFeed'
      customFeed: '$(projectName)/$(feedName)'

  # PR versioning for master branch & staging branch
  - task: Npm@1
    displayName: 'Bump package version - PR for master & staging branch'
    condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.SourceBranch'], 'refs/heads/staging'), eq(variables['Build.Reason'], 'PullRequest'))
    inputs:
      command: 'custom'
      workingDir: $(Build.SourcesDirectory)
      verbose: false
      customCommand: 'version $(majorProductVersion).$(minorProductVersion).0-alpha$(system.pullrequest.pullrequestid)-$(pullRequestPatchCount) --no-git-tag-version --allow-same-version'
      customRegistry: 'useFeed'
      customFeed: '$(projectName)/$(feedName)'

  # Name branch prefix to build version (master & staging branch)
  - task: Npm@1
    displayName: 'Bump package version - other branch'
    condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.SourceBranch'], 'refs/heads/staging'), ne(variables['Build.Reason'], 'PullRequest'))
    inputs:
      command: 'custom'
      workingDir: $(Build.SourcesDirectory)
      verbose: false
      customCommand: 'version $(majorProductVersion).$(minorProductVersion).0-$(Build.BuildId)-$(branchPatchCount) --no-git-tag-version --allow-same-version'
      customRegistry: 'useFeed'
      customFeed: '$(projectName)/$(feedName)'

  # Publishes npm package
  - task: Npm@1
    displayName: 'Publish Artifact'
    inputs:
      command: 'publish'
      publishRegistry: 'useFeed'
      publishFeed: '$(projectName)/$(feedName)'
    condition: succeeded()
