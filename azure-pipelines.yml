trigger:
  branches:
    include:
      - development
      - master

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm


stages:
  - stage: InstallDependencies
    displayName: 'Install Dependencies'
    jobs:
    - job: InstallDependencies

      pool:
        vmImage: 'windows-2019'
        displayName: 'Run Main Build and Test Pipeline'
        
      steps:
      - task: Cache@2
        inputs:
          key: 'npm | "$(Agent.OS)" | package-lock.json'
          restoreKeys: |
            npm | "$(Agent.OS)"
          path: $(npm_config_cache)
        displayName: Cache npm

      - script: npm ci


  - stage: Tests
    dependsOn: InstallDependencies
    displayName: 'Run Tests'
    jobs:
    - job: RunTests

      steps: 

        # Test
        - task: Npm@1
          displayName: 'Run Unit Tests'
          inputs:
            command: 'custom'
            customCommand: 'run test:ci'
        
        # Publish Test Results
        - task: PublishTestResults@2
          displayName: 'Publish Test Results'
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: 'test/junit.xml'
            failTaskOnFailedTests: true

        # Publish Code Coverage Results
        - task: PublishCodeCoverageResults@1
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '$(Build.Repository.LocalPath)\coverage\cobertura-coverage.xml'
            reportDirectory: '$(Build.Repository.LocalPath)\coverage\'


  - stage: BuildDocz
    dependsOn: InstallDependencies
    displayName: 'Build Docz'
    jobs:
    - job: BuildDocz

      steps:

        # Build Docz
        - task: Npm@1
          displayName: 'Run Build Docz'
          inputs:
            command: 'custom'
            customCommand: 'run build'
        
        # Copy Docz Files To Artifacts Staging Directory
        - task: CopyFiles@2
          displayName: 'Copy Docz Files To Artifacts Staging Directory'
          inputs:
            SourceFolder: '.docz\dist'
            Contents: '**'
            TargetFolder: '$(Build.Artifactstagingdirectory)'
            CleanTargetFolder: true
            OverWrite: true
        
        # Publish Docz
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Docz'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'


  - stage: PublishArtifacts
    dependsOn: Tests
    displayName: 'Publish Artifacts'
    jobs:
    - job: PublishArtifacts

      steps:

      # Add Git User
      - task: Bash@3
        displayName: 'Add Git User'
        inputs:
          targetType: 'inline'
          script: |
            git config --global user.email "Admin@FixIt148.onmicrosoft.com"
            git config --global user.name "Fixit"

      # Bump Package Version Patch
      - task: Npm@1
        displayName: 'Bump Package Version'
        inputs:
          command: 'custom'
          customCommand: 'version patch --force'
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
      
      # Bump Package Version Minor
      - task: Npm@1
        displayName: 'Bump Package Version'
        inputs:
          command: 'custom'
          customCommand: 'version minor --force'
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

      # Publishes npm package
      - task: Npm@1
        displayName: 'Publish Artifact'
        inputs:
          command: 'publish'
          publishRegistry: 'useFeed'
          # publishFeed: projectName/feedName
          publishFeed: '08d378fd-be72-4c80-9ce4-1a7c754efb98/7ba6392b-6ff3-4d8f-bdc4-0a4bcdee1710'
  



